buildscript {
	repositories {
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		mavenCentral()
		maven { 
			name = "Jitpack"
			url 'https://jitpack.io/'
		}
	}
	dependencies {
		classpath 'com.github.Chocohead.Fabric-Loom:fabric-loom:0d0261a'
	}
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
	include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
}

sourceSets {
	shim
	main {
		compileClasspath += shim.output
	}
}

compileJava {
	mappings {
		from = 'named'
		to = 'intermediary'
		classes += ['net/minecraft/class_6850': 'net/minecraft/class_6850', 'net/minecraft/class_6850$class_6851': 'net/minecraft/class_6850$class_6851']
		method 'net/optifine/reflect/ReflectorForge', '(Lnet/minecraft/item/ItemStack;)Z', 'isItemDamaged', 'isItemDamaged'
		method 'net/minecraft/client/particle/ParticleManager', '(Lnet/minecraft/client/util/math/MatrixStack;Lnet/minecraft/client/render/VertexConsumerProvider$Immediate;' +
		'Lnet/minecraft/client/render/LightmapTextureManager;Lnet/minecraft/client/render/Camera;FLnet/minecraft/client/render/Frustum;)V', 'renderParticles', 'renderParticles'
		method 'net/minecraft/client/particle/ParticleManager', '(Lnet/minecraft/client/util/math/MatrixStack;Lnet/minecraft/client/render/VertexConsumerProvider$Immediate;' +
		'Lnet/minecraft/client/render/LightmapTextureManager;Lnet/minecraft/client/render/Camera;FLnet/minecraft/client/render/Frustum;)V', 'render', 'render'
		method 'net/optifine/BlockPosM', '(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/util/math/BlockPos;)Ljava/lang/Iterable;', 'getAllInBoxMutable', 'getAllInBoxMutable'
		method 'net/minecraft/network/PacketByteBuf', '(Lnet/minecraft/item/ItemStack;Z)Lnet/minecraft/network/PacketByteBuf;', 'writeItemStack', 'writeItemStack' 
		classes += ['net/minecraft/world/HeightLimitView': 'net/minecraft/class_5539']
		method 'net/minecraft/util/crash/CrashReportSection', '(Lnet/minecraft/util/crash/CrashReportSection;Lnet/minecraft/world/HeightLimitView;' + 
		'Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/BlockState;)V', 'addBlockInfo', 'method_586'
		classes += ['net/minecraft/util/math/random/Random': 'net/minecraft/class_5819',
					'net/minecraft/client/render/chunk/ChunkBuilder$BuiltChunk$RebuildTask$RenderData' : 'net/minecraft/class_846$class_851$class_4578$class_7435']
		method 'net/minecraft/client/render/chunk/ChunkBuilder$BuiltChunk$RebuildTask', '(FFFLnet/minecraft/client/render/chunk/BlockBufferBuilderStorage;)' + 
				'Lnet/minecraft/client/render/chunk/ChunkBuilder$BuiltChunk$RebuildTask$RenderData;', 'render', 'method_22785'
		classes += ['net/minecraft/class_7172', 'net/minecraft/class_7172$class_7307', 'net/minecraft/class_7172$class_7303', 'net/minecraft/class_7172$class_7178'].collectEntries{[it, it]}
		method 'net/minecraft/client/render/WorldRenderer', '(Lnet/minecraft/client/util/math/MatrixStack;FJZLnet/minecraft/client/render/Camera;' +
		'Lnet/minecraft/client/render/GameRenderer;Lnet/minecraft/client/render/LightmapTextureManager;Lorg/joml/Matrix4f;)V', 'render', 'method_22710'
		method 'net/minecraft/client/gui/screen/Screen', '(Lnet/minecraft/client/util/math/MatrixStack;IIF)V', 'renderWithTooltip', 'method_47413'
		classes += ['net/minecraft/class_5944': 'net/minecraft/class_5944']
		method 'net/minecraft/class_5944', '(Lnet/minecraft/class_5912;Lnet/minecraft/util/Identifier;Lnet/minecraft/client/render/VertexFormat;)V', '<init>', '<init>'
		method 'net/minecraft/client/gui/screen/Screen', '(Lnet/minecraft/class_332;IIF)V', 'renderWithTooltip', 'method_47413'
	}
}

task unzip(type: Copy) {
	def zipFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
	def outputDir = file("${buildDir}/unpacked/dist")

	if(outputDir.exists()){
		outputDir.deleteDir()
	}

	from zipTree(zipFile)
	into outputDir
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
